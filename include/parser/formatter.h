#include <ostream>
#include <variant>

#include "parser.h"
#include "tokenizer.h"

/**
 * @class CodeGenerator
 * @brief Converts AST-like structure to source code.
 *
 * Using a structure generated by `Parser` class outputs the source code that the AST-like structure corresponds to to
 * the specified stream.
 */
class CodeGenerator {
public:
    /**
     * @brief Constucts `CodeGenerator` entity with the stream where the source code should be printed to.
     */
    explicit CodeGenerator(std::ostream& out);

    /**
     * @brief Starts the generation.
     */
    void Generate(const Module& module);

private:
    std::ostream& out_;
    size_t indent_level_ = 0;

    /**
     * @brief Helper function to print `2 * indent_level_` spaces at the start of the line.
     */
    void Indent();

    /**
     * @brief Helper function that outputs '\n' and invokes `Indent`.
     */
    void NewLine();

    /**
     * @brief Starts an indented block.
     */
    void StartBlock();

    /**
     * @brief Ends an indented block.
     */
    void EndBlock();

    void GenerateModule(const Module& module);
    void GenerateImports(const Imports& imports);

    /**
     * @struct DeclarationVisitor
     * @brief A visitor pattern helper structure for better declaration generation.
     */
    struct DeclarationVisitor {
        explicit DeclarationVisitor(CodeGenerator& gen);
        void operator()(const Constant& c);
        void operator()(const Function& f);
        void operator()(const Module& m);

        CodeGenerator& gen_;
    };

    void GenerateDeclaration(const Declaration& decl);
    void GenerateConstant(const Constant& constant);
    void GenerateFunction(const Function& func);

    /**
     * @struct ExpressionVisitor
     * @brief A visitor pattern helper structure for better expression generation.
     */
    struct ExpressionVisitor {
        explicit ExpressionVisitor(CodeGenerator& gen, int parent_precedence, Operator parent_operator);
        void operator()(const BinaryOperation& binop);
        void operator()(const FunctionCall& fc);
        void operator()(const Variable& v);
        void operator()(const Number& n);
        void operator()(const Float& f);

        CodeGenerator& gen_;
        int parent_precedence_;
        Operator parent_operator_;
    };

    /**
     * @brief Generates source code for an expression. Accepts parent operator its precedence as context for correctly
     * placing brackets around certain binary operation expressions.
     */
    void GenerateExpression(const Expression& expr, int parent_precedence = 0,
                            Operator parent_operator = Operator::ROOT);
    void GenerateBinaryOperation(const BinaryOperation& op, int parent_precedence = 0,
                                 Operator parent_operator = Operator::ROOT);
    void GenerateFunctionCall(const FunctionCall& call);
    void GenerateVariable(const Variable& var);
    void GenerateNumber(const Number& n);
    void GenerateFloat(const Float& f);
};
